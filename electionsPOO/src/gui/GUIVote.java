/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gui;

import beans.UserCredentials;
import beans.blockchain.Block;
import beans.candidate.Candidates;
import beans.election.ElectionManager;
import beans.elector.Electors;
import beans.votes.VoteBean;
import distributed.RemoteInterface;
import static gui.GUIUtilizador.keys;
import utils.Constants;
import utils.MainUtils;
import utils.enums.Errors;
import java.io.File;
import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import utils.SecurityUtils;
import utils.Serializer;

/**
 *
 * @author Tiago
 */
public class GUIVote extends javax.swing.JDialog {
    
    UserCredentials keys;
    RemoteInterface remote;
    Candidates candidates;
    Electors electors;
    ElectionManager election;
    
    private void updateGUIList() {
        MainUtils.listaGUIElector.removeAllElements();
        for (int i = 0; i < electors.size(); i++) {
            MainUtils.listaGUIElector.addElement(electors.getGUIListLine(election.getElection().getElectorList().get(i)));
        }

    }
    /**
     * Creates new form Vote
     * @param parent
     * @param modal
     * @throws java.lang.Exception
     */
    public GUIVote(java.awt.Frame parent, boolean modal, RemoteInterface remote, Candidates candidates, Electors electors, ElectionManager election) throws Exception {
        super(parent, modal);
        initComponents();
        
       
      
        this.remote = remote;
        this.keys = keys;
        //this.electors = electors;
         System.out.println("USING ELECTORS FROM REMOTE");
        this.electors = new Electors();
        this.electors.setList(remote.getElectorsList());
      
        //this.candidates = candidates;
        System.out.println("USING CANDIDATES FROM REMOTE"); 
        this.candidates = new Candidates();
        this.candidates.setList(remote.getCandidateList());
        //this.election = election;
        this.election = remote.getElection();
        
        election.save(Constants.electionFilePath);
        
        GuiVoteElectorList.setModel(MainUtils.listaGUIElector);
        if(election.getElection()!=null){
            GuiVoteEleicaoNome.setText(election.getElection().getName());
            GuiVoteEleicaoDataInicio.setText(election.getElection().getStartDate());
            GuiVoteEleicaoDataFim.setText(election.getElection().getStartDate());
        }
             
        updateGUIList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Exception = new javax.swing.JDialog();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        GUIVoteCCElector = new javax.swing.JTextField();
        GUIVoteAutenticationElectorPhoto = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        GuiVotePassword = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        GuiVoteSearchField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        GuiVoteElectorList = new javax.swing.JList<>();
        GuiVoteElectorPhoto = new javax.swing.JLabel();
        InfoLabelAboutElector = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        GuiVoteEleicaoNome = new javax.swing.JTextField();
        GuiVoteEleicaoDataInicio = new javax.swing.JTextField();
        GuiVoteEleicaoDataFim = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ResultadosTexto = new javax.swing.JTextPane();

        Exception.setAlwaysOnTop(true);

        javax.swing.GroupLayout ExceptionLayout = new javax.swing.GroupLayout(Exception.getContentPane());
        Exception.getContentPane().setLayout(ExceptionLayout);
        ExceptionLayout.setHorizontalGroup(
            ExceptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        ExceptionLayout.setVerticalGroup(
            ExceptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusGained(evt);
            }
        });
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTabbedPane1MousePressed(evt);
            }
        });

        GUIVoteCCElector.setBorder(javax.swing.BorderFactory.createTitledBorder("Cartão de Cidadão"));
        GUIVoteCCElector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GUIVoteCCElectorActionPerformed(evt);
            }
        });

        GUIVoteAutenticationElectorPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GUIVoteAutenticationElectorPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/election.png"))); // NOI18N
        GUIVoteAutenticationElectorPhoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        GuiVotePassword.setBorder(javax.swing.BorderFactory.createTitledBorder("Password"));
        GuiVotePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuiVotePasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GUIVoteCCElector, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(GUIVoteAutenticationElectorPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addComponent(GuiVotePassword))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GUIVoteCCElector, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GUIVoteAutenticationElectorPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GuiVotePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Autenticação", jPanel1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/nav_find.png"))); // NOI18N
        jButton1.setText("Pesquisar");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        GuiVoteSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuiVoteSearchFieldActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista Eleitoral"));

        GuiVoteElectorList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                GuiVoteElectorListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(GuiVoteElectorList);

        GuiVoteElectorPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/menu_electos.png"))); // NOI18N
        GuiVoteElectorPhoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(GuiVoteSearchField))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(GuiVoteElectorPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(InfoLabelAboutElector)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GuiVoteSearchField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GuiVoteElectorPhoto))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(InfoLabelAboutElector)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Eleitores", jPanel2);

        GuiVoteEleicaoNome.setEditable(false);
        GuiVoteEleicaoNome.setBorder(javax.swing.BorderFactory.createTitledBorder("Nome"));
        GuiVoteEleicaoNome.setEnabled(false);

        GuiVoteEleicaoDataInicio.setEditable(false);
        GuiVoteEleicaoDataInicio.setBorder(javax.swing.BorderFactory.createTitledBorder("Data de Início"));
        GuiVoteEleicaoDataInicio.setEnabled(false);

        GuiVoteEleicaoDataFim.setEditable(false);
        GuiVoteEleicaoDataFim.setBorder(javax.swing.BorderFactory.createTitledBorder("Data de Fim"));
        GuiVoteEleicaoDataFim.setEnabled(false);

        jLabel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Fotografia"));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_file.png"))); // NOI18N
        jButton2.setText("Abrir");
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GuiVoteEleicaoNome)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GuiVoteEleicaoDataInicio)
                            .addComponent(GuiVoteEleicaoDataFim)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GuiVoteEleicaoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(GuiVoteEleicaoDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(GuiVoteEleicaoDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(245, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Eleição", jPanel3);

        ResultadosTexto.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));
        jScrollPane2.setViewportView(ResultadosTexto);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(185, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Resultado", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty(Constants.userSystemDir)));
            int result = fileChooser.showOpenDialog(fileChooser);
            if (result == JFileChooser.APPROVE_OPTION) {
                String selectedFile = fileChooser.getSelectedFile().getAbsolutePath();
                election.load(selectedFile);
                GuiVoteEleicaoNome.setText(election.getElection().getName());
                GuiVoteEleicaoDataInicio.setText(election.getElection().getStartDate());
                GuiVoteEleicaoDataFim.setText(election.getElection().getEndDate());
                updateGUIList();
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(Exception, Errors.FileManipulation.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
            Logger.getLogger(GUIElector.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(Exception, Errors.ErrorExecutingAction.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
            Logger.getLogger(GUIElector.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(Exception, Errors.UnavailableFunctionality.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
            Logger.getLogger(GUICandidate.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void GuiVoteSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuiVoteSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GuiVoteSearchFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String textToSearch = GuiVoteSearchField.getText();

        try{
            if(textToSearch.toCharArray().length<Constants.maxSizeForTextBox){
                int index;

                index = electors.searchElectorByName(textToSearch);
                if (!(MainUtils.isNullOrEmpty(String.valueOf(index)))) {
                    GuiVoteElectorList.setSelectedIndex(index);
                } else {
                    index = electors.searchElectorByCC(textToSearch);
                    if (!(MainUtils.isNullOrEmpty(String.valueOf(index)))) {
                        GuiVoteElectorList.setSelectedIndex(index);
                    } else {
                        JOptionPane.showMessageDialog(Exception, Errors.NoRecordsFound.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
                    }
                }
            }else{
                throw new Exception();
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(Exception, Errors.MoreThan50Chars.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
            Logger.getLogger(GUIElector.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void GuiVoteElectorListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_GuiVoteElectorListValueChanged
        // TODO add your handling code here:
        
        int selections[] = GuiVoteElectorList.getSelectedIndices();
        if(selections.length>0){
            InfoLabelAboutElector.setText(electors.getGUIListLine(electors.getList().get(selections[0])));
            GUIVoteCCElector.setText(String.valueOf(electors.getList().get(selections[0]).getCC()));
            //foto to label
            /*if (ElectorList.getList().get(selections[0]).getPhoto() != null) {
                GuiVoteElectorPhoto.setIcon(MainUtils.resizeIcon(ElectorList.getList().get(selections[0]).getPhoto(), GuiVoteElectorPhoto.getWidth(), GuiVoteElectorPhoto.getHeight()));
                GUIVoteAutenticationElectorPhoto.setIcon(MainUtils.resizeIcon(ElectorList.getList().get(selections[0]).getPhoto(), GUIVoteAutenticationElectorPhoto.getWidth(), GUIVoteAutenticationElectorPhoto.getHeight()));
            } else {*/
                GuiVoteElectorPhoto.setIcon(MainUtils.resizeIcon(new ImageIcon(getClass().getResource(Constants.personResource)), GuiVoteElectorPhoto.getWidth(), GuiVoteElectorPhoto.getHeight()));
                GUIVoteAutenticationElectorPhoto.setIcon(MainUtils.resizeIcon(new ImageIcon(getClass().getResource(Constants.personResource)), GUIVoteAutenticationElectorPhoto.getWidth(), GUIVoteAutenticationElectorPhoto.getHeight()));
            //} 
        }
        
    }//GEN-LAST:event_GuiVoteElectorListValueChanged

    private void GUIVoteCCElectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GUIVoteCCElectorActionPerformed
        // TODO add your handling code here:
        
        int index = electors.searchElectorByCC(GUIVoteCCElector.getText());
        
        InfoLabelAboutElector.setText(electors.getGUIListLine(electors.getList().get(index)));
        GUIVoteCCElector.setText(String.valueOf(electors.getList().get(index).getCC()));
        //foto to label
        /*if (ElectorList.getList().get(index).getPhoto() != null) {
            GuiVoteElectorPhoto.setIcon(MainUtils.resizeIcon(ElectorList.getList().get(index).getPhoto(), GuiVoteElectorPhoto.getWidth(), GuiVoteElectorPhoto.getHeight()));
            GUIVoteAutenticationElectorPhoto.setIcon(MainUtils.resizeIcon(ElectorList.getList().get(index).getPhoto(), GUIVoteAutenticationElectorPhoto.getWidth(), GUIVoteAutenticationElectorPhoto.getHeight()));
        } else {*/
            GuiVoteElectorPhoto.setIcon(MainUtils.resizeIcon(new ImageIcon(getClass().getResource(Constants.personResource)), GuiVoteElectorPhoto.getWidth(), GuiVoteElectorPhoto.getHeight()));
            GUIVoteAutenticationElectorPhoto.setIcon(MainUtils.resizeIcon(new ImageIcon(getClass().getResource(Constants.personResource)), GUIVoteAutenticationElectorPhoto.getWidth(), GUIVoteAutenticationElectorPhoto.getHeight()));
        //} 
        
    }//GEN-LAST:event_GUIVoteCCElectorActionPerformed

    private void GuiVotePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuiVotePasswordActionPerformed
        // TODO add your handling code here:
        int index = electors.searchElectorByCC(GUIVoteCCElector.getText());
        String electorPassword = electors.getList().get(index).getPassword();
        String userInputPassword = GuiVotePassword.getText();
        
        try{
            if(!remote.getElectionState()){
                //if(!electors.getList().get(index).isVoted()){
                    if(electorPassword.equals(userInputPassword)){
                        try {
                            // TODO add your handling code here:
                            String userName = electors.getList().get(index).getName();

                            UserCredentials keys = null;

                            //Atribuir chaves se for a primeira vez a fazer login
                            try{
                                keys = UserCredentials.autenticar(userName, userInputPassword);

                                List<Block> blockchain = remote.getBlockchain().getChain();
                                List<String> votesList = remote.getVotesList();

                                boolean isFirst = true;

                                for(Block block : blockchain){
                                    if(isFirst){
                                        isFirst = false;
                                        continue;
                                    }
                                    List<String> transactionsList = (List<String>) Serializer.base64ToObject(block.getData()); 
                                    for(String voteInfo : transactionsList){
                                        VoteBean vote = (VoteBean) Serializer.base64ToObject(voteInfo);

                                        byte[] bytesFrom = Base64.getDecoder().decode(vote.getFrom());

                                        byte[] electorName = null;

                                        try{
                                            electorName = SecurityUtils.decrypt(bytesFrom, keys.getPrivKey());
                                        }catch(Exception e){
                                            e.printStackTrace();
                                            continue;
                                        }
                                        String elector = Base64.getEncoder().encodeToString(electorName);

                                        byte[] userNameLogged = userName.getBytes();
                                        userName = Base64.getEncoder().encodeToString(userNameLogged);

                                        if(elector.equals(userName)){
                                            
                                            JOptionPane.showMessageDialog(Exception, Errors.AlreadyVoted.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
                                            
                                            int response = JOptionPane.showConfirmDialog(
                                                    null, // parentComponent - pode ser 'null' se você não tem um componente pai
                                                    Errors.CheckVote.getErro(), // mensagem
                                                    Constants.exceptionDialogPopUpTitle, // título
                                                    JOptionPane.OK_CANCEL_OPTION, // opções de botão
                                                    JOptionPane.INFORMATION_MESSAGE // tipo de mensagem
                                            );
                                            
                                            // Lida com a resposta
                                            if (response == JOptionPane.OK_OPTION) {
                                                JOptionPane.showMessageDialog(Exception, "Você votou em " + vote.getTo(), Constants.infoDialogPopUpTitle, JOptionPane.OK_OPTION);
                                            } else if (response == JOptionPane.CANCEL_OPTION) {
                                                System.out.println("Botão Cancel pressionado");
                                            } else {
                                                System.out.println("Nenhuma opção selecionada");
                                            }
                                            
                                            return;

                                        }

                                    }
                                }

                                for(String vote : votesList){
                                    VoteBean voteBean = (VoteBean) Serializer.base64ToObject(vote);

                                    String from = voteBean.getFrom();
                                    byte[] bytesFrom = Base64.getDecoder().decode(from);

                                    byte[] electorName = null;

                                    try{
                                       electorName = SecurityUtils.decrypt(bytesFrom, keys.getPrivKey());
                                    }catch(Exception e){
                                        e.printStackTrace();
                                       continue;
                                    }


                                    String elector = Base64.getEncoder().encodeToString(electorName);

                                    byte[] userNameLogged = userName.getBytes();
                                    userName = Base64.getEncoder().encodeToString(userNameLogged);

                                    if(elector.equals(userName)){
                                         
                                        JOptionPane.showMessageDialog(Exception, Errors.AlreadyVoted.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
                                        
                                        
                                        int response = JOptionPane.showConfirmDialog(
                                                null, // parentComponent - pode ser 'null' se você não tem um componente pai
                                                Errors.CheckVote.getErro(), // mensagem
                                                Constants.exceptionDialogPopUpTitle, // título
                                                JOptionPane.OK_CANCEL_OPTION, // opções de botão
                                                JOptionPane.INFORMATION_MESSAGE // tipo de mensagem
                                        );

                                        // Lida com a resposta
                                        if (response == JOptionPane.OK_OPTION) {
                                            JOptionPane.showMessageDialog(Exception, "Você votou em " + voteBean.getTo(), Constants.infoDialogPopUpTitle, JOptionPane.OK_OPTION);
                                        } else if (response == JOptionPane.CANCEL_OPTION) {
                                            System.out.println("Botão Cancel pressionado");
                                        } else {
                                            System.out.println("Nenhuma opção selecionada");
                                        }
                                        return;
                                    }
                                }   

                             }catch(Exception e){
                                 e.printStackTrace();
                                 if(e.getMessage().startsWith("user")){
                                    try{     
                                        keys = UserCredentials.registar(userName, userInputPassword);
                                    }catch(Exception ex){
                                       Logger.getLogger(GUIMainMenu.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                 }
                             }

                            GUIUtilizador dialog = new GUIUtilizador(electors.getList().get(index), remote, keys, candidates, electors, election);
                            dialog.setVisible(true);
                            dispose();

                        } catch (Exception ex) {
                            Logger.getLogger(GUIMainMenu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                /*}else{
                    JOptionPane.showMessageDialog(Exception, Errors.AlreadyVoted.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
                }*/
            }else{
                JOptionPane.showMessageDialog(Exception, Errors.ElectionNotStarted.getErro(), Constants.exceptionDialogPopUpTitle, JOptionPane.OK_OPTION);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_GuiVotePasswordActionPerformed

    private void jTabbedPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1MouseEntered

    private void jTabbedPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1FocusGained

    private void jTabbedPane1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MousePressed
        // TODO add your handling code here:
        try{
            String result = remote.getElectionResult();
   
            if(result.isEmpty()){
                ResultadosTexto.setText("Aguarde a eleição terminar para consultar os resultados!");
            }else{
                ResultadosTexto.setText(result);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
 
    }//GEN-LAST:event_jTabbedPane1MousePressed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIVote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIVote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIVote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIVote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            GUIVote dialog = null;
            try {
                dialog = new GUIVote(new javax.swing.JFrame(), true, remote, candidates, electors, election);
            } catch (Exception ex) {
                Logger.getLogger(GUIVote.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Exception;
    private javax.swing.JLabel GUIVoteAutenticationElectorPhoto;
    private javax.swing.JTextField GUIVoteCCElector;
    private javax.swing.JList<String> GuiVoteElectorList;
    private javax.swing.JLabel GuiVoteElectorPhoto;
    private javax.swing.JTextField GuiVoteEleicaoDataFim;
    private javax.swing.JTextField GuiVoteEleicaoDataInicio;
    private javax.swing.JTextField GuiVoteEleicaoNome;
    private javax.swing.JTextField GuiVotePassword;
    private javax.swing.JTextField GuiVoteSearchField;
    private javax.swing.JLabel InfoLabelAboutElector;
    private javax.swing.JTextPane ResultadosTexto;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
